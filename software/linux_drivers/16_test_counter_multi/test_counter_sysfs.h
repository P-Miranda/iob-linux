/* This file was automatically generated by:
 * `write_linux_sysfs_header` method of `mkregs.py`
 */

#ifndef H_TEST_COUNTER_SYSFS_H
#define H_TEST_COUNTER_SYSFS_H

// Sysfs show/store functions
static ssize_t sysfs_enosys_show(struct device *dev, struct device_attribute *attr, char *buf) {
	return -ENOSYS;
}

static ssize_t sysfs_enosys_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
	return -ENOSYS;
}

static ssize_t sysfs_id_show(struct device *dev, struct device_attribute *attr, char *buf) {
    struct iob_data *t_counter_data = (struct iob_data*) dev->platform_data;
	u32 value = iob_data_read_reg(t_counter_data->regbase, TEST_COUNTER_ID_ADDR, TEST_COUNTER_ID_W);
	pr_info("Sysfs - Read: 0x%u\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_rst_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
    struct iob_data *t_counter_data = (struct iob_data*) dev->platform_data;
	u32 value = 0;
	if (!mutex_trylock(&t_counter_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(t_counter_data->regbase, value, TEST_COUNTER_RST_ADDR, TEST_COUNTER_RST_W);
	mutex_unlock(&t_counter_mutex);
	pr_info("Sysfs - Write: 0x%u\n", value);
	return count;
}

static ssize_t sysfs_incr_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
    struct iob_data *t_counter_data = (struct iob_data*) dev->platform_data;
	u32 value = 0;
	if (!mutex_trylock(&t_counter_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(t_counter_data->regbase, value, TEST_COUNTER_INCR_ADDR, TEST_COUNTER_INCR_W);
	mutex_unlock(&t_counter_mutex);
	pr_info("Sysfs - Write: 0x%u\n", value);
	return count;
}

static ssize_t sysfs_sample_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
    struct iob_data *t_counter_data = (struct iob_data*) dev->platform_data;
	u32 value = 0;
	if (!mutex_trylock(&t_counter_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(t_counter_data->regbase, value, TEST_COUNTER_SAMPLE_ADDR, TEST_COUNTER_SAMPLE_W);
	mutex_unlock(&t_counter_mutex);
	pr_info("Sysfs - Write: 0x%u\n", value);
	return count;
}

static ssize_t sysfs_data_show(struct device *dev, struct device_attribute *attr, char *buf) {
    struct iob_data *t_counter_data = (struct iob_data*) dev->platform_data;
	u32 value = iob_data_read_reg(t_counter_data->regbase, TEST_COUNTER_DATA_ADDR, TEST_COUNTER_DATA_W);
	pr_info("Sysfs - Read: 0x%u\n", value);
	return sprintf(buf, "%u", value);
}

static ssize_t sysfs_set_store(struct device *dev, struct device_attribute *attr, const char __user *buf, size_t count) {
    struct iob_data *t_counter_data = (struct iob_data*) dev->platform_data;
	u32 value = 0;
	if (!mutex_trylock(&t_counter_mutex)) {
		pr_info("Another process is accessing the device\n");
		return -EBUSY;
	}
	sscanf(buf, "%u", &value);
	iob_data_write_reg(t_counter_data->regbase, value, TEST_COUNTER_SET_ADDR, TEST_COUNTER_SET_W);
	mutex_unlock(&t_counter_mutex);
	pr_info("Sysfs - Write: 0x%u\n", value);
	return count;
}

// Device attributes
DEVICE_ATTR(id, 0600, sysfs_id_show, sysfs_enosys_store);
DEVICE_ATTR(rst, 0600, sysfs_enosys_show, sysfs_rst_store);
DEVICE_ATTR(incr, 0600, sysfs_enosys_show, sysfs_incr_store);
DEVICE_ATTR(sample, 0600, sysfs_enosys_show, sysfs_sample_store);
DEVICE_ATTR(data, 0600, sysfs_data_show, sysfs_enosys_store);
DEVICE_ATTR(set, 0600, sysfs_enosys_show, sysfs_set_store);

// Probe / Remove functions
static int test_counter_create_device_attr_files(struct device *device) {
	int ret = 0;
	ret |= device_create_file(device, &dev_attr_id);
	ret |= device_create_file(device, &dev_attr_rst);
	ret |= device_create_file(device, &dev_attr_incr);
	ret |= device_create_file(device, &dev_attr_sample);
	ret |= device_create_file(device, &dev_attr_data);
	ret |= device_create_file(device, &dev_attr_set);
	return ret;
}

static void test_counter_remove_device_attr_files(struct iob_data *test_counter_data) {
	device_remove_file(test_counter_data->device, &dev_attr_id);
	device_remove_file(test_counter_data->device, &dev_attr_rst);
	device_remove_file(test_counter_data->device, &dev_attr_incr);
	device_remove_file(test_counter_data->device, &dev_attr_sample);
	device_remove_file(test_counter_data->device, &dev_attr_data);
	device_remove_file(test_counter_data->device, &dev_attr_set);
	device_destroy(test_counter_data->class, test_counter_data->devnum);
	return;
}

#endif // H_TEST_COUNTER_SYSFS_H
